#! /bin/sh

defhost="icb.evolve.com"
defport="7326"
build=`./config.guess`

echo "this appears to be a ${build} system, bub."

case $build in 

	*-irix5*)
		cflags="${cflags} -DNEED_ALLOCA"
		systype=svr4
		;;
	*-irix6*)
		systype=svr4
		;;
	*-linux*)
		cflags="${cflags} -DVOID_SIGHANDLER=1"
		systype=posix
		;;
	*-hpux*)
		cflags="${cflags} -DNEED_ALLOCA -D_BSD"
		systype=svr4
		;;
	*-aix*)
		echo "AIX sucks!"
		cc="bsdcc"
		cflags="${cflags} -ma -w"
		systype=aix
		;;
	*bsd*)
		systype=bsd
		;;
	*-next*)
		cflags="${cflags} -DNO_LRAND48 -bsd"
		extralibs="${extralibs} -lmalloc -lsun"
		systype=bsd
		;;
	*-solaris*)
		cc="gcc"
		cflags="${cflags} -DVOID_SIGHANDLER=1"
		systype=svr
		;;
	*-sunos*)
		cc="gcc"
		systype=bsd
		;;
	*)
		systype=unknown
		echo "I donut know anything about ${build} system..."
		;;
esac
		
echo ""
echo "Congradulations, you have a ${systype} system."
echo ""

if [ -f conf/${systype}.mk ] ; then
	echo "loading system defaults for ${systype}..."
	. conf/${systype}.mk
fi

cat << EOF
specify installation target:

EOF

homedir=${HOME:-`pwd`}
defbindir="${homedir}/bin"
defmandir="${homedir}/man"
deflibdir="${homedir}/lib"

echo ""
echo "Directory for executables? (typically \$HOME/bin or /usr/local/bin)"
echo -n "[${defbindir}] >"
read bindir

if [ -z "${bindir}" ]; then
	bindir="${defbindir}"
else
	case "$bindir" in
		*/bin)
			defparent="`expr "$bindir" : '\(.*\)/bin'`"
			defmandir="$defparent/man"
			deflibdir="$defparent/lib"
			;;
		*)
			:;;
	esac
fi

echo ""
echo "Directory for man page? (typically \$HOME/man or /usr/local/man)"
echo -n "[${defmandir}] >"
read mandir
if [ -z "${mandir}" ]; then
	mandir="${defmandir}"
fi

echo ""
echo "Directory for support files? (typically \$HOME/lib or /usr/local/lib)"
echo -n "[${deflibdir}] >"
read libdir
if [ -z "${libdir}" ]; then
	libdir="${deflibdir}"
fi

case "$bindir" in
	\~)	bindir="${homedir}";;
	\~/*)	bindir="${homedir}`expr "$bindir" : '~\(.*\)'`";;
	*) :;;
esac

case "$mandir" in
	\~)	mandir="${homedir}";;
	\~/*)	mandir="${homedir}`expr "$mandir" : '~\(.*\)'`";;
	*) :;;
esac

case "$libdir" in
	\~)	libdir="${homedir}";;
	\~/*)	libdir="${homedir}`expr "$libdir" : '~\(.*\)'`";;
	*) :;;
esac

cat <<EOF


The package will normally be compiled with the regular C compiler, "cc".
You may specify an alternate compiler like gcc here.

EOF
echo -n  "Compiler? [${cc}] "
read compiler
if [ ! -z "${compiler}" ]; then
	cc="${compiler}"
fi

#
#	Extra options
#

cat <<EOF


If you use the default, the package will be compiled with "-O -s" to
conserve disk space. If icb crashes and you wish to debug it, or if you
even suspect it might crash on your system, you should use "-g" instead.

If you are using gcc, and you start getting messages about failed IOCTLs,
then your gcc hasn't been properly installed. Add "-traditional" to the
compile flags, and tell your sysadmin to run "fixincludes".

EOF

echo -n  "Compiler options? [${cflags}] "
read extra
if [ ! -z "${extra}" ]; then
	cflags="${extra}"
fi


cat <<EOF


This program accesses the service by connecting to a remote server.
For normal use, it will look in .icbservrc in the user's home directory
and the the icb server database file (icbserverdb in the support files
directory).  If it cannot find a legal entry in either of these places,
it will use the following default host and port.

It is usually better for efficiency and portability to use the numeric
address of the host. Legal addresses might be: crater.unm.edu,
129.24.12.18 or [129.24.12.18].
EOF
echo -n  "Internet host name of the server's machine? [${defhost}] "
read host
if [ -z "${host}" ]; then
	host="${defhost}"
fi
echo -n  "Port number of the server? [${defport}] "
read port
if [ -z "${port}" ]; then
	port="${defport}"
fi


cat <<EOF


Now I'm going to look for some files...

EOF

#
# find strings.h
#

if [ -r "/usr/include/strings.h" ]; then
	echo "Your strings header is <strings.h>".
	cflags="${cflags} -DSTRINGS_H"
elif [ -r "/usr/include/string.h" ]; then
	echo "Your strings header is <string.h>".
else
	echo "Couldn't find <strings.h> or <string.h>. Quitting..."
	exit 0
fi

#
# find time.h
#

if [ -r "/usr/include/time.h" ]; then
	echo "Your time header is <time.h>".
	cflags="${cflags} -DTIME_H"
elif [ -r "/usr/include/sys/time.h" ]; then
	echo "Your time header is <sys/time.h>".
else
	echo "Couldn't find <time.h> or <sys/time.h>. Quitting..."
	exit 0
fi

#
# see if libresolv is out there
#

if [ -r "/usr/lib/libresolv.a" ]; then
	echo "Found the TCP/IP resolver library."
		if [ -z "${resolvlib}" ] ; then
			resolvlib="-lresolv"
		fi
else
	echo "Didn't find /usr/lib/libresolv.a. Without this library, some"
	echo "systems may core dump. We'll give it a try..."
fi


#
# check for some functions
#

_CC="${cc}"
_CFLAGS="${cflags}"

export _CC _CFLAGS

if  support/hasfunc strerror  ; then 
	cflags="${cflags} -DHAVE_STRERROR"
fi

if  support/hasfunc strtol ; then 
	cflags="${cflags} -DHAVE_STRTOL"
fi

if support/hasfunc strcasecmp ; then
	cflags="${cflags} -DHAVE_STRCASECMP"
fi
unset _CC _CFLAGS


cat > site.mk <<EOF
#
#	THIS IS AN AUTOMATICALLY GENERATED FILE
#
#	If you edit this file and later run "setup", your
#	changes will be lost. This file gets fed to "make",
#	so keep that in mind if you make changes.
#

# Installing user's home directory
HOME		= ${HOME}

# Directory where the client will be installed.
BINDIR		= ${bindir}

# Directory where the manual page will be installed.
MANDIR		= ${mandir}


# Directory for support files
LIBDIR = ${libdir}

EOF

for i in cc cflags  extralibs resolvlib ; do
	if [ ! -z "$${i}" ] ; then
		case $i in
			cflags)
				echo "CFLAGS=${cflags} -I.." >> site.mk
				echo "" >> site.mk
				;;
			cc)
				echo "CC=${cc}" >> site.mk
				echo "" >> site.mk
				;;
			extralibs)
				echo "EXTRALIBS=${extralibs}" >> site.mk
				echo "" >> site.mk
				;;
			resolvlib)
				echo "RESOLVLIB=${resolvlib}" >> site.mk
				echo "" >> site.mk
				;;
		esac
	fi
done
	
echo "DEFAULTHOST=${host}" >> site.mk
echo "DEFAULTPORT=${port}" >> site.mk
echo "SERVERLIST=${libdir}/icbserverdb" >> site.mk




#
#	All done. Tell the user what to do next.
#

cat <<EOF


Setup script complete.

Now you can type:

make 		Compile the program.
make install	Compile and install program and manual pages.
make clean	Clean up the mess that compile generates.
make depend     (Hackers only) Generate makefile dependencies.

If you have problems, you may need to edit "config" by hand. See the
file INSTALLING if you're really stuck.

EOF

echo "configuring gnu readline..."

(cd readline && ./configure)
exit 0

